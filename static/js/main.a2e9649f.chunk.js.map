{"version":3,"sources":["components/search/Searchbox.js","components/Header.js","components/Footer.js","components/search/SearchItem.js","components/search/SearchResults.js","components/recipe/Ingredient.js","components/recipe/FlavorChart.js","components/recipe/RecipeDetail.js","App.js","serviceWorker.js","index.js"],"names":["Searchbox","state","query","handleChange","e","_this","setState","target","value","searchSubmit","preventDefault","console","log","Object","assertThisInitialized","props","history","push","react_default","a","createElement","Form","inline","onSubmit","this","FormControl","type","placeholder","className","onChange","Button","variant","onClick","Component","withRouter","Header","Navbar","bg","expand","Brand","Link","to","Toggle","aria-controls","Collapse","id","Nav","search_Searchbox","Footer","style","styles","footer","h5","padding","backgroundColor","marginTop","color","SearchItem","src","item","image","alt","name","SearchResults","responseArray","that","match","params","fetch","then","response","json","myJson","responseObjects","i","matches","length","recipeName","imageUrlsBySize","catch","error","prevProps","componentDidMount","map","search_SearchItem","key","generateList","Ingredient","FlavorChart","ctx","document","getElementById","Chart","data","labels","datasets","label","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","width","height","RecipeDetail","recipe","ingredients","recipeID","images","hostedLargeUrl","servings","numberOfServings","flavors","externalURL","source","sourceRecipeUrl","ingredientLines","recipe_Ingredient","_this2","href","recipe_FlavorChart","addItem","App","menus","recipes","pIndex","arr","toConsumableArray","mealList","splice","menuArray","localStorage","setItem","JSON","stringify","HashRouter","components_Header","Route","exact","path","component","render","routeProps","recipe_RecipeDetail","assign","components_Footer","Boolean","window","location","hostname","ReactDOM","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2e9649f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {withRouter} from \"react-router-dom\";\nimport {Form, FormControl, Button} from 'react-bootstrap'\n\n\nclass Searchbox extends Component {\n\n  state = {\n    \"query\" : \"\"\n  };\n\n  //when value of searchbox changes, set the state to the new value\n  handleChange = e => {\n    this.setState({\"query\": e.target.value})\n  };\n\n  //when the form is submitted prevent the page from reloading and then use the props.history\n  searchSubmit = e => {\n    e.preventDefault();\n    console.log(this);\n    this.props.history.push(\"/search/\"+this.state.query);\n  }\n\n  //create our searchbox which has a method for capturing the value and a method that runs on submit\n  render() {\n    return (\n      <Form inline onSubmit={this.searchSubmit}>\n        <FormControl type=\"text\" placeholder=\"Search for recipes\" className=\"mr-sm-2\" value={this.state.query} onChange={this.handleChange}/>\n        <Button variant=\"outline-success\" onClick={this.searchSubmit}>Search</Button>\n      </Form>\n    )\n  }\n}\n\nexport default withRouter(Searchbox);\n","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {Navbar, Nav, NavDropdown} from 'react-bootstrap'\nimport Searchbox from './search/Searchbox';\n\nconst Header = (props)=>{\n    return(\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand><Link to=\"/\">Meal Planner</Link></Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto mr-3\">\n            <Nav.Link><Link to=\"/\">Home</Link></Nav.Link>\n            <Nav.Link><Link to=\"/menu\">Menu</Link></Nav.Link>\n          </Nav>\n          <Searchbox />\n        </Navbar.Collapse>\n      </Navbar>\n\n    )\n\n}\n\nexport default Header\n","import React from 'react'\n\nconst Footer = (props) => {\n    return(\n        <footer style={styles.footer}>\n            <h5 style={styles.h5}>Â©2019 Jessica Giehl, wd5.</h5>\n        </footer>\n    )\n}\n\nexport default Footer\n\nconst styles = {\n  footer: {\n    padding: '1px',\n    backgroundColor: 'rgba(9, 117, 33, 1)',\n    marginTop: '1rem'\n  },\n  h5: {\n    color: 'white'\n  }\n}\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nconst SearchItem = (props) => {\n    return(\n      //from the props item, display the name and price propery\n        <li>\n          <img src={props.item.image} alt={props.item.name}></img>\n          <b>{props.item.name}</b>\n          <Link to={\"../recipe/\" + props.item.id}>Recipe Details</Link>\n        </li>\n    )\n}\n\nexport default SearchItem\n","import React,{Component} from 'react';\nimport SearchItem from './SearchItem';\n\nclass SearchResults extends Component{\n\n    state = {\n        \"responseArray\" : [\n        ]\n    }\n\n    //Make a API call when the component mounts\n    componentDidMount() {\n      let that = this;\n      //variables for storing api string\n      var url= \"https://api.yummly.com/v1/api/recipes?_app_id=a18fce64&_app_key=a14d935b77f1742265befa9527b9232e&requirePictures=true&q=\";\n      //use the prop parameters to get the search query string from the URL\n      var {query} = this.props.match.params;\n\n      fetch(url + query)\n        .then(function(response) {\n          //turn response into a JSON object\n          return response.json();\n        })\n        .then(function(myJson) {\n          console.log(myJson);\n\n          var responseObjects = [];\n\n          //loop through the array of responses and create an object with the information for each one\n          for (var i = 0; i < myJson.matches.length; i++) {\n            responseObjects.push({\n              name : myJson.matches[i].recipeName,\n              id : myJson.matches[i].id,\n              image : myJson.matches[i].imageUrlsBySize[90]\n            });\n        }\n        //set the state with our array of responseObjects\n        that.setState({responseArray: responseObjects});\n      })\n      .catch(error => console.error(error));\n    }\n\n    componentDidUpdate(prevProps){\n      if (this.props.match.params !== prevProps.match.params){\n        this.componentDidMount();\n      }\n    }\n\n    //method that maps through our menu prop and uses the values to create list items\n    generateList(){\n        let ret = this.state.responseArray.map((e,i)=>{\n          //console.log(e);\n          return <SearchItem key={i} item={e} />\n        })\n\n        return ret;\n    }\n\n    render(){\n        return(\n            <section>\n              <h3>Search results for {this.props.query}:</h3>\n              {/* call the generateList function and output it in an unordered list */}\n              <ul>{this.generateList()}</ul>\n            </section>\n        )\n    }\n\n}\n\nexport default SearchResults\n","import React from 'react'\n\nconst Ingredient = (props) => {\n    return(\n        <li>{props.name}</li>\n    )\n}\n\nexport default Ingredient\n","import React,{Component} from 'react';\nimport Chart from 'chart.js';\n\nclass FlavorChart extends Component{\n\n  createChart(){\n        var ctx = document.getElementById(\"myChart\");\n        var myChart = new Chart(ctx, {\n        type: 'radar',\n        data: {\n            labels: [\"Red\", \"Blue\", \"Yellow\", \"Green\", \"Purple\", \"Orange\"],\n            datasets: [{\n                label: '# of Votes',\n                data: [12, 19, 3, 5, 2, 3],\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)'\n                ],\n                borderColor: [\n                    'rgba(255,99,132,1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)'\n                ],\n                borderWidth: 1\n            }]\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true\n                    }\n                }]\n            }\n        }\n    });\n  }\n\n    render(){\n        return(\n            <canvas id=\"myChart\" width=\"400\" height=\"400\">\n            \n            </canvas>\n        )\n    }\n\n}\n\nexport default FlavorChart\n","import React,{Component} from 'react';\nimport Ingredient from './Ingredient';\nimport Flavorchart from './FlavorChart';\n\nclass RecipeDetail extends Component{\n\n  state = {\n    recipe : {\n      ingredients : [],\n    }\n  }\n\n  //Make a API call when the component mounts\n  componentDidMount() {\n    var that = this;\n    //variables for storing api string\n    var urlStart = \"https://api.yummly.com/v1/api/recipe/\"\n    const {recipeID} = this.props.match.params\n    var urlEnd = \"?_app_id=a18fce64&_app_key=a14d935b77f1742265befa9527b9232e\";\n    console.log(recipeID);\n\n    fetch(urlStart + recipeID + urlEnd)\n      .then(function(response) {\n        //turn response into a JSON object\n        return response.json();\n      })\n      .then(function(myJson) {\n        console.log(myJson);\n        var recipe = {\n          \"name\" : myJson.name,\n          \"image\" : myJson.images[0].hostedLargeUrl,\n          \"servings\" : myJson.numberOfServings,\n          \"ingredients\" : [],\n          \"flavors\" : [],\n          \"externalURL\" : myJson.source.sourceRecipeUrl\n        }\n        for (var i = 0; i < myJson.ingredientLines.length; i++) {\n          recipe.ingredients.push(myJson.ingredientLines[i]);\n        }\n        for (var i = 0; i < myJson.flavors.length; i++) {\n          recipe.flavors.push(myJson.flavors[i]);\n        }\n        console.log(recipe);\n        that.setState({\"recipe\":recipe});\n        console.log(that.state.recipe.ingredients);\n    })\n    .catch(error => console.error(error));\n  }\n\n  //loop through our ingredients in the state and return an ingredient component for each one\n  generateList(){\n      let ret = this.state.recipe.ingredients.map((e,i)=>{\n        return <Ingredient name={e} />\n      })\n\n      return ret;\n  }\n\n    //render out the recipe details using the values we set in the state\n    render(){\n        return(\n          <section>\n            <h2>{this.state.recipe.name}</h2>\n            <img src={this.state.recipe.image} alt={this.state.recipe.name}></img>\n            <p>Number of servings: {this.state.recipe.servings} </p>\n            <a href={this.state.recipe.externalURL}>Recipe Source</a>\n            <p>Ingredients:</p>\n            <ul>\n              {this.generateList()}\n            </ul>\n            <Flavorchart flavors={this.state.recipe.flavors}/>\n            <button onClick={() => this.props.addItem(this.state.recipe)}>Add to Menu</button>\n          </section>\n        )\n    }\n\n}\n\nexport default RecipeDetail\n","import React, { Component } from 'react';\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport SearchResults from './components/search/SearchResults';\nimport RecipeDetail from './components/recipe/RecipeDetail';\nimport Searchbox from './components/search/Searchbox';\n//import MealList from './components/planner/MealList';\n\n//import './App.css';\n\nclass App extends Component {\n\n  //exists for the lifetime of the app, is static until updated with setState\n  state={\n        \"menus\":[\n          {\n            name : \"default\",\n            recipes : []\n          }\n        ],\n  }\n\n  //method to delete a pizza object from the state using the index from our menu list\n  deleteItemAt(pIndex){\n    console.log(\"deleteItemAt\",pIndex)\n    //create a copy of the state array\n    let arr = [...this.state.mealList];\n    //splice the new array it at the index of the item being deleted, delete just the one item\n    arr.splice(pIndex,1);\n    //set the value of the state equal to our new array\n    this.setState({mealList:arr})\n  }\n\n  addItem(recipe){\n    //data binding\n    let menuArray = [...this.state.menus]\n    let defaultMenu = menuArray[0];\n    //push the recipe object to our newly created array\n    defaultMenu.recipes.push(recipe);\n    this.setState({menus: menuArray})\n    localStorage.setItem('menuStorage', JSON.stringify(menuArray));\n  }\n\n  //renders the header, searchbox, and the footer. The main body of the page is dictated by the URL,\n  //search/ and recipe/ both pass paramaters into their route components\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {/* import the header component, pass a title as a prop */}\n          <Header/>\n          <section>\n          <Route exact path = \"/search/:query\"\n            component={SearchResults}/>\n          <Route exact path = \"/recipe/:recipeID\"\n            render={(routeProps) => (\n              <RecipeDetail {...routeProps} addItem={(recipe) =>this.addItem(recipe)} />\n            )} />\n          </section>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}